// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Defines values for ErrorForbiddenKind.
const (
	Forbidden ErrorForbiddenKind = "forbidden"
)

// Defines values for ErrorInternalServerErrorKind.
const (
	InternalServerError ErrorInternalServerErrorKind = "internal_server_error"
)

// Defines values for ErrorNotFoundKind.
const (
	NotFound ErrorNotFoundKind = "not_found"
)

// Defines values for ErrorUnauthorizedKind.
const (
	Unauthorized ErrorUnauthorizedKind = "unauthorized"
)

// Defines values for ErrorUnavailableErrorKind.
const (
	Unavailable ErrorUnavailableErrorKind = "unavailable"
)

// ErrorForbidden defines model for ErrorForbidden.
type ErrorForbidden struct {
	// ErrorCode エラーコード
	ErrorCode string             `json:"errorCode"`
	Kind      ErrorForbiddenKind `json:"kind"`

	// Reason 表示されるメッセージ
	Reason string `json:"reason"`
}

// ErrorForbiddenKind defines model for ErrorForbidden.Kind.
type ErrorForbiddenKind string

// ErrorInternalServerError defines model for ErrorInternalServerError.
type ErrorInternalServerError struct {
	// ErrorCode エラーコード
	ErrorCode string                       `json:"errorCode"`
	Kind      ErrorInternalServerErrorKind `json:"kind"`

	// Reason 表示されるメッセージ
	Reason string `json:"reason"`
}

// ErrorInternalServerErrorKind defines model for ErrorInternalServerError.Kind.
type ErrorInternalServerErrorKind string

// ErrorNotFound defines model for ErrorNotFound.
type ErrorNotFound struct {
	// ErrorCode エラーコード
	ErrorCode string            `json:"errorCode"`
	Kind      ErrorNotFoundKind `json:"kind"`

	// Reason 表示されるメッセージ
	Reason string `json:"reason"`
}

// ErrorNotFoundKind defines model for ErrorNotFound.Kind.
type ErrorNotFoundKind string

// ErrorUnauthorized defines model for ErrorUnauthorized.
type ErrorUnauthorized struct {
	// ErrorCode エラーコード
	ErrorCode string                `json:"errorCode"`
	Kind      ErrorUnauthorizedKind `json:"kind"`

	// Reason 表示されるメッセージ
	Reason string `json:"reason"`
}

// ErrorUnauthorizedKind defines model for ErrorUnauthorized.Kind.
type ErrorUnauthorizedKind string

// ErrorUnavailableError defines model for ErrorUnavailableError.
type ErrorUnavailableError struct {
	// ErrorCode エラーコード
	ErrorCode string                    `json:"errorCode"`
	Kind      ErrorUnavailableErrorKind `json:"kind"`

	// Reason 表示されるメッセージ
	Reason string `json:"reason"`
}

// ErrorUnavailableErrorKind defines model for ErrorUnavailableError.Kind.
type ErrorUnavailableErrorKind string

// ErrorValidationError defines model for ErrorValidationError.
type ErrorValidationError struct {
	// Reason エラー原因
	Reason string `json:"reason"`

	// Rule エラーとなった対象ルール
	Rule string `json:"rule"`

	// Schema 対応するスキーマ
	Schema interface{} `json:"schema"`

	// Value バリデーション対象の値
	Value interface{} `json:"value"`
}

// ResponseHealthHealth defines model for ResponseHealthHealth.
type ResponseHealthHealth struct {
	// Status サーバーのステータス
	Status string `json:"status"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 生存確認API
	// (GET /health)
	GetHealth(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)

}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse ResponseHealthHealth

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// 生存確認API
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx echo.Context) error {
	var request GetHealthRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx.Request().Context(), request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		return validResponse.VisitGetHealthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
