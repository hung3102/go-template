// Code generated by MockGen. DO NOT EDIT.
// Source: gcas_dashboard_api.go
//
// Generated by this command:
//
//	mockgen -source=gcas_dashboard_api.go -destination=../../apiimpl/mocks/gcas_dashboard_api_mock.go -package=mockapi
//

// Package mockapi is a generated GoMock package.
package mockapi

import (
	reflect "reflect"

	gcasdashboardapi "github.com/topgate/gcim-temporary/back/app/internal/api/gcasdashboardapi"
	gomock "go.uber.org/mock/gomock"
)

// MockGCASDashboardAPI is a mock of GCASDashboardAPI interface.
type MockGCASDashboardAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGCASDashboardAPIMockRecorder
}

// MockGCASDashboardAPIMockRecorder is the mock recorder for MockGCASDashboardAPI.
type MockGCASDashboardAPIMockRecorder struct {
	mock *MockGCASDashboardAPI
}

// NewMockGCASDashboardAPI creates a new mock instance.
func NewMockGCASDashboardAPI(ctrl *gomock.Controller) *MockGCASDashboardAPI {
	mock := &MockGCASDashboardAPI{ctrl: ctrl}
	mock.recorder = &MockGCASDashboardAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCASDashboardAPI) EXPECT() *MockGCASDashboardAPIMockRecorder {
	return m.recorder
}

// GetAccounts mocks base method.
func (m *MockGCASDashboardAPI) GetAccounts() (*gcasdashboardapi.GetAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts")
	ret0, _ := ret[0].(*gcasdashboardapi.GetAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockGCASDashboardAPIMockRecorder) GetAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockGCASDashboardAPI)(nil).GetAccounts))
}

// GetCost mocks base method.
func (m *MockGCASDashboardAPI) GetCost(csp, accountID string) (*gcasdashboardapi.GetCostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCost", csp, accountID)
	ret0, _ := ret[0].(*gcasdashboardapi.GetCostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCost indicates an expected call of GetCost.
func (mr *MockGCASDashboardAPIMockRecorder) GetCost(csp, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCost", reflect.TypeOf((*MockGCASDashboardAPI)(nil).GetCost), csp, accountID)
}
