// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -source=provider.go -destination=./mocks/service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// IssueAuthToken mocks base method.
func (m *MockProvider) IssueAuthToken(userID, sessionID string, now time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueAuthToken", userID, sessionID, now)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueAuthToken indicates an expected call of IssueAuthToken.
func (mr *MockProviderMockRecorder) IssueAuthToken(userID, sessionID, now any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueAuthToken", reflect.TypeOf((*MockProvider)(nil).IssueAuthToken), userID, sessionID, now)
}

// VerifyAuthToken mocks base method.
func (m *MockProvider) VerifyAuthToken(token string) (jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthToken", token)
	ret0, _ := ret[0].(jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAuthToken indicates an expected call of VerifyAuthToken.
func (mr *MockProviderMockRecorder) VerifyAuthToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthToken", reflect.TypeOf((*MockProvider)(nil).VerifyAuthToken), token)
}
