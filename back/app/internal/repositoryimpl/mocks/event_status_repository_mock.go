// Code generated by MockGen. DO NOT EDIT.
// Source: event_status_repository.go
//
// Generated by this command:
//
//	mockgen -source=event_status_repository.go -destination=../repositoryimpl/mocks/event_status_repository_mock.go -package=mockrepositories
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/topgate/gcim-temporary/back/app/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockEventStatusRepository is a mock of EventStatusRepository interface.
type MockEventStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventStatusRepositoryMockRecorder
}

// MockEventStatusRepositoryMockRecorder is the mock recorder for MockEventStatusRepository.
type MockEventStatusRepositoryMockRecorder struct {
	mock *MockEventStatusRepository
}

// NewMockEventStatusRepository creates a new mock instance.
func NewMockEventStatusRepository(ctrl *gomock.Controller) *MockEventStatusRepository {
	mock := &MockEventStatusRepository{ctrl: ctrl}
	mock.recorder = &MockEventStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStatusRepository) EXPECT() *MockEventStatusRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEventStatusRepository) Create(ctx context.Context, eventStatus *entities.EventStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, eventStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEventStatusRepositoryMockRecorder) Create(ctx, eventStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventStatusRepository)(nil).Create), ctx, eventStatus)
}

// GetByEventIDAndStatus mocks base method.
func (m *MockEventStatusRepository) GetByEventIDAndStatus(ctx context.Context, eventID string, status int) (*entities.EventStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEventIDAndStatus", ctx, eventID, status)
	ret0, _ := ret[0].(*entities.EventStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEventIDAndStatus indicates an expected call of GetByEventIDAndStatus.
func (mr *MockEventStatusRepositoryMockRecorder) GetByEventIDAndStatus(ctx, eventID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEventIDAndStatus", reflect.TypeOf((*MockEventStatusRepository)(nil).GetByEventIDAndStatus), ctx, eventID, status)
}
