// Code generated by MockGen. DO NOT EDIT.
// Source: gcas_account_repository.go
//
// Generated by this command:
//
//	mockgen -source=gcas_account_repository.go -destination=../repositoryimpl/mocks/gcas_account_repository_mock.go -package=mockrepositories
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/topgate/gcim-temporary/back/app/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockGCASAccountRepository is a mock of GCASAccountRepository interface.
type MockGCASAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGCASAccountRepositoryMockRecorder
}

// MockGCASAccountRepositoryMockRecorder is the mock recorder for MockGCASAccountRepository.
type MockGCASAccountRepositoryMockRecorder struct {
	mock *MockGCASAccountRepository
}

// NewMockGCASAccountRepository creates a new mock instance.
func NewMockGCASAccountRepository(ctrl *gomock.Controller) *MockGCASAccountRepository {
	mock := &MockGCASAccountRepository{ctrl: ctrl}
	mock.recorder = &MockGCASAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCASAccountRepository) EXPECT() *MockGCASAccountRepositoryMockRecorder {
	return m.recorder
}

// CreateMany mocks base method.
func (m *MockGCASAccountRepository) CreateMany(ctx context.Context, gcasAccounts []*entities.GCASAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", ctx, gcasAccounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockGCASAccountRepositoryMockRecorder) CreateMany(ctx, gcasAccounts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockGCASAccountRepository)(nil).CreateMany), ctx, gcasAccounts)
}

// GetAccounts mocks base method.
func (m *MockGCASAccountRepository) GetAccounts(ctx context.Context, eventDocID string) ([]*entities.GCASAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, eventDocID)
	ret0, _ := ret[0].([]*entities.GCASAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockGCASAccountRepositoryMockRecorder) GetAccounts(ctx, eventDocID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockGCASAccountRepository)(nil).GetAccounts), ctx, eventDocID)
}
