// Code generated by MockGen. DO NOT EDIT.
// Source: gcas_csp_cost_repository.go
//
// Generated by this command:
//
//	mockgen -source=gcas_csp_cost_repository.go -destination=../repositoryimpl/mocks/gcas_csp_cost_repository_mock.go -package=mockrepositories
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/topgate/gcim-temporary/back/app/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockGCASCSPCostRepository is a mock of GCASCSPCostRepository interface.
type MockGCASCSPCostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGCASCSPCostRepositoryMockRecorder
}

// MockGCASCSPCostRepositoryMockRecorder is the mock recorder for MockGCASCSPCostRepository.
type MockGCASCSPCostRepositoryMockRecorder struct {
	mock *MockGCASCSPCostRepository
}

// NewMockGCASCSPCostRepository creates a new mock instance.
func NewMockGCASCSPCostRepository(ctrl *gomock.Controller) *MockGCASCSPCostRepository {
	mock := &MockGCASCSPCostRepository{ctrl: ctrl}
	mock.recorder = &MockGCASCSPCostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCASCSPCostRepository) EXPECT() *MockGCASCSPCostRepositoryMockRecorder {
	return m.recorder
}

// CreateMulti mocks base method.
func (m *MockGCASCSPCostRepository) CreateMulti(ctx context.Context, gcasCSPCosts []*entities.GCASCSPCost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulti", ctx, gcasCSPCosts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMulti indicates an expected call of CreateMulti.
func (mr *MockGCASCSPCostRepositoryMockRecorder) CreateMulti(ctx, gcasCSPCosts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulti", reflect.TypeOf((*MockGCASCSPCostRepository)(nil).CreateMulti), ctx, gcasCSPCosts)
}

// Exists mocks base method.
func (m *MockGCASCSPCostRepository) Exists(ctx context.Context, eventDocID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, eventDocID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockGCASCSPCostRepositoryMockRecorder) Exists(ctx, eventDocID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockGCASCSPCostRepository)(nil).Exists), ctx, eventDocID)
}
