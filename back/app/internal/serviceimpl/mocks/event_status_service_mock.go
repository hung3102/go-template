// Code generated by MockGen. DO NOT EDIT.
// Source: event_status_service.go
//
// Generated by this command:
//
//	mockgen -source=event_status_service.go -destination=../serviceimpl/mocks/event_status_service_mock.go -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventStatusService is a mock of EventStatusService interface.
type MockEventStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockEventStatusServiceMockRecorder
}

// MockEventStatusServiceMockRecorder is the mock recorder for MockEventStatusService.
type MockEventStatusServiceMockRecorder struct {
	mock *MockEventStatusService
}

// NewMockEventStatusService creates a new mock instance.
func NewMockEventStatusService(ctrl *gomock.Controller) *MockEventStatusService {
	mock := &MockEventStatusService{ctrl: ctrl}
	mock.recorder = &MockEventStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStatusService) EXPECT() *MockEventStatusServiceMockRecorder {
	return m.recorder
}

// SetInvoiceCreationChecked mocks base method.
func (m *MockEventStatusService) SetInvoiceCreationChecked(ctx context.Context, eventDocID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInvoiceCreationChecked", ctx, eventDocID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInvoiceCreationChecked indicates an expected call of SetInvoiceCreationChecked.
func (mr *MockEventStatusServiceMockRecorder) SetInvoiceCreationChecked(ctx, eventDocID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInvoiceCreationChecked", reflect.TypeOf((*MockEventStatusService)(nil).SetInvoiceCreationChecked), ctx, eventDocID)
}

// ShouldcreateInvoice mocks base method.
func (m *MockEventStatusService) ShouldcreateInvoice(ctx context.Context, eventDocID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldcreateInvoice", ctx, eventDocID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldcreateInvoice indicates an expected call of ShouldcreateInvoice.
func (mr *MockEventStatusServiceMockRecorder) ShouldcreateInvoice(ctx, eventDocID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldcreateInvoice", reflect.TypeOf((*MockEventStatusService)(nil).ShouldcreateInvoice), ctx, eventDocID)
}
