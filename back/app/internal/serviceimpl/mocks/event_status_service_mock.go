// Code generated by MockGen. DO NOT EDIT.
// Source: event_status_service.go
//
// Generated by this command:
//
//	mockgen -source=event_status_service.go -destination=../serviceimpl/mocks/event_status_service_mock.go -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventStatusService is a mock of EventStatusService interface.
type MockEventStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockEventStatusServiceMockRecorder
}

// MockEventStatusServiceMockRecorder is the mock recorder for MockEventStatusService.
type MockEventStatusServiceMockRecorder struct {
	mock *MockEventStatusService
}

// NewMockEventStatusService creates a new mock instance.
func NewMockEventStatusService(ctrl *gomock.Controller) *MockEventStatusService {
	mock := &MockEventStatusService{ctrl: ctrl}
	mock.recorder = &MockEventStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStatusService) EXPECT() *MockEventStatusServiceMockRecorder {
	return m.recorder
}

// IsInvoiceCreatable mocks base method.
func (m *MockEventStatusService) IsInvoiceCreatable(ctx context.Context, eventID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInvoiceCreatable", ctx, eventID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInvoiceCreatable indicates an expected call of IsInvoiceCreatable.
func (mr *MockEventStatusServiceMockRecorder) IsInvoiceCreatable(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInvoiceCreatable", reflect.TypeOf((*MockEventStatusService)(nil).IsInvoiceCreatable), ctx, eventID)
}

// SetBillable mocks base method.
func (m *MockEventStatusService) SetBillable(ctx context.Context, eventID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBillable", ctx, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBillable indicates an expected call of SetBillable.
func (mr *MockEventStatusServiceMockRecorder) SetBillable(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBillable", reflect.TypeOf((*MockEventStatusService)(nil).SetBillable), ctx, eventID)
}
