// Code generated by MockGen. DO NOT EDIT.
// Source: org_csp_account_gen.go
//
// Generated by this command:
//
//	mockgen -source org_csp_account_gen.go -destination mocks/org_csp_account_gen.go
//

// Package mock_infrastructures is a generated GoMock package.
package mock_infrastructures

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	volcago "github.com/topgate/gcim-temporary/back/app/internal/volcago"
	infrastructures "github.com/topgate/gcim-temporary/back/app/internal/volcago/infrastructures"
	gomock "go.uber.org/mock/gomock"
)

// MockOrgCSPAccountRepository is a mock of OrgCSPAccountRepository interface.
type MockOrgCSPAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrgCSPAccountRepositoryMockRecorder
}

// MockOrgCSPAccountRepositoryMockRecorder is the mock recorder for MockOrgCSPAccountRepository.
type MockOrgCSPAccountRepositoryMockRecorder struct {
	mock *MockOrgCSPAccountRepository
}

// NewMockOrgCSPAccountRepository creates a new mock instance.
func NewMockOrgCSPAccountRepository(ctrl *gomock.Controller) *MockOrgCSPAccountRepository {
	mock := &MockOrgCSPAccountRepository{ctrl: ctrl}
	mock.recorder = &MockOrgCSPAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgCSPAccountRepository) EXPECT() *MockOrgCSPAccountRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockOrgCSPAccountRepository) Delete(ctx context.Context, subject *volcago.OrgCSPAccount, opts ...infrastructures.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) Delete(ctx, subject any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).Delete), varargs...)
}

// DeleteByID mocks base method.
func (m *MockOrgCSPAccountRepository) DeleteByID(ctx context.Context, id string, opts ...infrastructures.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) DeleteByID(ctx, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).DeleteByID), varargs...)
}

// DeleteByIDWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) DeleteByIDWithTx(ctx context.Context, tx *firestore.Transaction, id string, opts ...infrastructures.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByIDWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIDWithTx indicates an expected call of DeleteByIDWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) DeleteByIDWithTx(ctx, tx, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).DeleteByIDWithTx), varargs...)
}

// DeleteMulti mocks base method.
func (m *MockOrgCSPAccountRepository) DeleteMulti(ctx context.Context, subjects []*volcago.OrgCSPAccount, opts ...infrastructures.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subjects}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMulti", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMulti indicates an expected call of DeleteMulti.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) DeleteMulti(ctx, subjects any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subjects}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulti", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).DeleteMulti), varargs...)
}

// DeleteMultiByIDs mocks base method.
func (m *MockOrgCSPAccountRepository) DeleteMultiByIDs(ctx context.Context, ids []string, opts ...infrastructures.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ids}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiByIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiByIDs indicates an expected call of DeleteMultiByIDs.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) DeleteMultiByIDs(ctx, ids any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ids}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiByIDs", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).DeleteMultiByIDs), varargs...)
}

// DeleteMultiByIDsWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) DeleteMultiByIDsWithTx(ctx context.Context, tx *firestore.Transaction, ids []string, opts ...infrastructures.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, ids}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiByIDsWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiByIDsWithTx indicates an expected call of DeleteMultiByIDsWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) DeleteMultiByIDsWithTx(ctx, tx, ids any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, ids}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiByIDsWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).DeleteMultiByIDsWithTx), varargs...)
}

// DeleteMultiWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) DeleteMultiWithTx(ctx context.Context, tx *firestore.Transaction, subjects []*volcago.OrgCSPAccount, opts ...infrastructures.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, subjects}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiWithTx indicates an expected call of DeleteMultiWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) DeleteMultiWithTx(ctx, tx, subjects any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, subjects}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).DeleteMultiWithTx), varargs...)
}

// DeleteWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) DeleteWithTx(ctx context.Context, tx *firestore.Transaction, subject *volcago.OrgCSPAccount, opts ...infrastructures.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, subject}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWithTx indicates an expected call of DeleteWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) DeleteWithTx(ctx, tx, subject any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, subject}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).DeleteWithTx), varargs...)
}

// Get mocks base method.
func (m *MockOrgCSPAccountRepository) Get(ctx context.Context, id string, opts ...infrastructures.GetOption) (*volcago.OrgCSPAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) Get(ctx, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).Get), varargs...)
}

// GetCollection mocks base method.
func (m *MockOrgCSPAccountRepository) GetCollection() *firestore.CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection")
	ret0, _ := ret[0].(*firestore.CollectionRef)
	return ret0
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) GetCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).GetCollection))
}

// GetCollectionName mocks base method.
func (m *MockOrgCSPAccountRepository) GetCollectionName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCollectionName indicates an expected call of GetCollectionName.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) GetCollectionName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionName", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).GetCollectionName))
}

// GetDocRef mocks base method.
func (m *MockOrgCSPAccountRepository) GetDocRef(id string) *firestore.DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocRef", id)
	ret0, _ := ret[0].(*firestore.DocumentRef)
	return ret0
}

// GetDocRef indicates an expected call of GetDocRef.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) GetDocRef(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocRef", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).GetDocRef), id)
}

// GetMulti mocks base method.
func (m *MockOrgCSPAccountRepository) GetMulti(ctx context.Context, ids []string, opts ...infrastructures.GetOption) ([]*volcago.OrgCSPAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ids}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMulti", varargs...)
	ret0, _ := ret[0].([]*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) GetMulti(ctx, ids any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ids}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).GetMulti), varargs...)
}

// GetMultiWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) GetMultiWithTx(tx *firestore.Transaction, ids []string, opts ...infrastructures.GetOption) ([]*volcago.OrgCSPAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{tx, ids}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMultiWithTx", varargs...)
	ret0, _ := ret[0].([]*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiWithTx indicates an expected call of GetMultiWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) GetMultiWithTx(tx, ids any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tx, ids}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).GetMultiWithTx), varargs...)
}

// GetWithDoc mocks base method.
func (m *MockOrgCSPAccountRepository) GetWithDoc(ctx context.Context, doc *firestore.DocumentRef, opts ...infrastructures.GetOption) (*volcago.OrgCSPAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, doc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithDoc", varargs...)
	ret0, _ := ret[0].(*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithDoc indicates an expected call of GetWithDoc.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) GetWithDoc(ctx, doc any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, doc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithDoc", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).GetWithDoc), varargs...)
}

// GetWithDocWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) GetWithDocWithTx(tx *firestore.Transaction, doc *firestore.DocumentRef, opts ...infrastructures.GetOption) (*volcago.OrgCSPAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{tx, doc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithDocWithTx", varargs...)
	ret0, _ := ret[0].(*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithDocWithTx indicates an expected call of GetWithDocWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) GetWithDocWithTx(tx, doc any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tx, doc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithDocWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).GetWithDocWithTx), varargs...)
}

// GetWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) GetWithTx(tx *firestore.Transaction, id string, opts ...infrastructures.GetOption) (*volcago.OrgCSPAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{tx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithTx", varargs...)
	ret0, _ := ret[0].(*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithTx indicates an expected call of GetWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) GetWithTx(tx, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).GetWithTx), varargs...)
}

// Insert mocks base method.
func (m *MockOrgCSPAccountRepository) Insert(ctx context.Context, subject *volcago.OrgCSPAccount) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) Insert(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).Insert), ctx, subject)
}

// InsertMulti mocks base method.
func (m *MockOrgCSPAccountRepository) InsertMulti(ctx context.Context, subjects []*volcago.OrgCSPAccount) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMulti", ctx, subjects)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMulti indicates an expected call of InsertMulti.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) InsertMulti(ctx, subjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMulti", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).InsertMulti), ctx, subjects)
}

// InsertMultiWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) InsertMultiWithTx(ctx context.Context, tx *firestore.Transaction, subjects []*volcago.OrgCSPAccount) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMultiWithTx", ctx, tx, subjects)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMultiWithTx indicates an expected call of InsertMultiWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) InsertMultiWithTx(ctx, tx, subjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMultiWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).InsertMultiWithTx), ctx, tx, subjects)
}

// InsertWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) InsertWithTx(ctx context.Context, tx *firestore.Transaction, subject *volcago.OrgCSPAccount) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWithTx", ctx, tx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertWithTx indicates an expected call of InsertWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) InsertWithTx(ctx, tx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).InsertWithTx), ctx, tx, subject)
}

// RunInTransaction mocks base method.
func (m *MockOrgCSPAccountRepository) RunInTransaction() func(context.Context, func(context.Context, *firestore.Transaction) error, ...firestore.TransactionOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTransaction")
	ret0, _ := ret[0].(func(context.Context, func(context.Context, *firestore.Transaction) error, ...firestore.TransactionOption) error)
	return ret0
}

// RunInTransaction indicates an expected call of RunInTransaction.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) RunInTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTransaction", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).RunInTransaction))
}

// Search mocks base method.
func (m *MockOrgCSPAccountRepository) Search(ctx context.Context, param *infrastructures.OrgCSPAccountSearchParam, q *firestore.Query) ([]*volcago.OrgCSPAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, param, q)
	ret0, _ := ret[0].([]*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) Search(ctx, param, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).Search), ctx, param, q)
}

// SearchByParam mocks base method.
func (m *MockOrgCSPAccountRepository) SearchByParam(ctx context.Context, param *infrastructures.OrgCSPAccountSearchParam) ([]*volcago.OrgCSPAccount, *infrastructures.PagingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByParam", ctx, param)
	ret0, _ := ret[0].([]*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(*infrastructures.PagingResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchByParam indicates an expected call of SearchByParam.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) SearchByParam(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByParam", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).SearchByParam), ctx, param)
}

// SearchByParamWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) SearchByParamWithTx(tx *firestore.Transaction, param *infrastructures.OrgCSPAccountSearchParam) ([]*volcago.OrgCSPAccount, *infrastructures.PagingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByParamWithTx", tx, param)
	ret0, _ := ret[0].([]*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(*infrastructures.PagingResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchByParamWithTx indicates an expected call of SearchByParamWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) SearchByParamWithTx(tx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByParamWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).SearchByParamWithTx), tx, param)
}

// SearchWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) SearchWithTx(tx *firestore.Transaction, param *infrastructures.OrgCSPAccountSearchParam, q *firestore.Query) ([]*volcago.OrgCSPAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWithTx", tx, param, q)
	ret0, _ := ret[0].([]*volcago.OrgCSPAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithTx indicates an expected call of SearchWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) SearchWithTx(tx, param, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).SearchWithTx), tx, param, q)
}

// StrictUpdate mocks base method.
func (m *MockOrgCSPAccountRepository) StrictUpdate(ctx context.Context, id string, param *infrastructures.OrgCSPAccountUpdateParam, opts ...firestore.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StrictUpdate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StrictUpdate indicates an expected call of StrictUpdate.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) StrictUpdate(ctx, id, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrictUpdate", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).StrictUpdate), varargs...)
}

// StrictUpdateWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) StrictUpdateWithTx(tx *firestore.Transaction, id string, param *infrastructures.OrgCSPAccountUpdateParam, opts ...firestore.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{tx, id, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StrictUpdateWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StrictUpdateWithTx indicates an expected call of StrictUpdateWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) StrictUpdateWithTx(tx, id, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tx, id, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrictUpdateWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).StrictUpdateWithTx), varargs...)
}

// Update mocks base method.
func (m *MockOrgCSPAccountRepository) Update(ctx context.Context, subject *volcago.OrgCSPAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) Update(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).Update), ctx, subject)
}

// UpdateMulti mocks base method.
func (m *MockOrgCSPAccountRepository) UpdateMulti(ctx context.Context, subjects []*volcago.OrgCSPAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMulti", ctx, subjects)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMulti indicates an expected call of UpdateMulti.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) UpdateMulti(ctx, subjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulti", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).UpdateMulti), ctx, subjects)
}

// UpdateMultiWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) UpdateMultiWithTx(ctx context.Context, tx *firestore.Transaction, subjects []*volcago.OrgCSPAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMultiWithTx", ctx, tx, subjects)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiWithTx indicates an expected call of UpdateMultiWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) UpdateMultiWithTx(ctx, tx, subjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).UpdateMultiWithTx), ctx, tx, subjects)
}

// UpdateWithTx mocks base method.
func (m *MockOrgCSPAccountRepository) UpdateWithTx(ctx context.Context, tx *firestore.Transaction, subject *volcago.OrgCSPAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithTx", ctx, tx, subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithTx indicates an expected call of UpdateWithTx.
func (mr *MockOrgCSPAccountRepositoryMockRecorder) UpdateWithTx(ctx, tx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithTx", reflect.TypeOf((*MockOrgCSPAccountRepository)(nil).UpdateWithTx), ctx, tx, subject)
}

// MockOrgCSPAccountRepositoryMiddleware is a mock of OrgCSPAccountRepositoryMiddleware interface.
type MockOrgCSPAccountRepositoryMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockOrgCSPAccountRepositoryMiddlewareMockRecorder
}

// MockOrgCSPAccountRepositoryMiddlewareMockRecorder is the mock recorder for MockOrgCSPAccountRepositoryMiddleware.
type MockOrgCSPAccountRepositoryMiddlewareMockRecorder struct {
	mock *MockOrgCSPAccountRepositoryMiddleware
}

// NewMockOrgCSPAccountRepositoryMiddleware creates a new mock instance.
func NewMockOrgCSPAccountRepositoryMiddleware(ctrl *gomock.Controller) *MockOrgCSPAccountRepositoryMiddleware {
	mock := &MockOrgCSPAccountRepositoryMiddleware{ctrl: ctrl}
	mock.recorder = &MockOrgCSPAccountRepositoryMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgCSPAccountRepositoryMiddleware) EXPECT() *MockOrgCSPAccountRepositoryMiddlewareMockRecorder {
	return m.recorder
}

// BeforeDelete mocks base method.
func (m *MockOrgCSPAccountRepositoryMiddleware) BeforeDelete(ctx context.Context, subject *volcago.OrgCSPAccount, opts ...infrastructures.DeleteOption) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeforeDelete", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeDelete indicates an expected call of BeforeDelete.
func (mr *MockOrgCSPAccountRepositoryMiddlewareMockRecorder) BeforeDelete(ctx, subject any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDelete", reflect.TypeOf((*MockOrgCSPAccountRepositoryMiddleware)(nil).BeforeDelete), varargs...)
}

// BeforeDeleteByID mocks base method.
func (m *MockOrgCSPAccountRepositoryMiddleware) BeforeDeleteByID(ctx context.Context, ids []string, opts ...infrastructures.DeleteOption) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ids}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeforeDeleteByID", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeDeleteByID indicates an expected call of BeforeDeleteByID.
func (mr *MockOrgCSPAccountRepositoryMiddlewareMockRecorder) BeforeDeleteByID(ctx, ids any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ids}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDeleteByID", reflect.TypeOf((*MockOrgCSPAccountRepositoryMiddleware)(nil).BeforeDeleteByID), varargs...)
}

// BeforeInsert mocks base method.
func (m *MockOrgCSPAccountRepositoryMiddleware) BeforeInsert(ctx context.Context, subject *volcago.OrgCSPAccount) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeInsert", ctx, subject)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeInsert indicates an expected call of BeforeInsert.
func (mr *MockOrgCSPAccountRepositoryMiddlewareMockRecorder) BeforeInsert(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeInsert", reflect.TypeOf((*MockOrgCSPAccountRepositoryMiddleware)(nil).BeforeInsert), ctx, subject)
}

// BeforeUpdate mocks base method.
func (m *MockOrgCSPAccountRepositoryMiddleware) BeforeUpdate(ctx context.Context, old, subject *volcago.OrgCSPAccount) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeUpdate", ctx, old, subject)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeUpdate indicates an expected call of BeforeUpdate.
func (mr *MockOrgCSPAccountRepositoryMiddlewareMockRecorder) BeforeUpdate(ctx, old, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeUpdate", reflect.TypeOf((*MockOrgCSPAccountRepositoryMiddleware)(nil).BeforeUpdate), ctx, old, subject)
}
